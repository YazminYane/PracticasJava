/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import AnaSintactico_P12.Lexico;
import AnaSintactico_P12.Token;
import AnaSintactico_P12.Tokens;
import AppPackage.AnimationClass;
import compiprograprueba.AnalizadorSintactico3P12;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Yazmin Yane
 */
public class AnalizdorSintactco3 extends javax.swing.JFrame {

    private String cadena = "";
    private boolean error = false;
    private Token tokens;
    private boolean banderaPar = false;
    private List<Token> tokensLista;
    private int contadorToken = 0;
    private String resultadoSintactico = "";
    private boolean errorLexico = false;
    private int numeroPar = 0;
    
    public AnalizdorSintactco3() {
        initComponents();
        this.setLocationRelativeTo( null );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCadena = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSin = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLex = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLCerrar = new javax.swing.JLabel();
        jLMinimizar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 153));
        jLabel4.setText("Analizador sintactico simple. Las reglas de producción son las");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 490, 40));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 153));
        jLabel9.setText("las siguientes:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 130, 40));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 153));
        jLabel7.setText("X := * E X | + E X | * E | + E");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 250, 40));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 153));
        jLabel11.setText("S := E;");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 80, 40));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 153));
        jLabel8.setText("Inserte Expresión a evaluar:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 290, 30));

        txtCadena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCadenaActionPerformed(evt);
            }
        });
        jPanel1.add(txtCadena, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 440, 30));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 153));
        jLabel10.setText("E := ( E ) X | num X | ( E ) | num ;");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 250, 40));

        jButton1.setText("Borrar");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 330, 120, 40));

        btnBuscar.setText("Evaluar ");
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, 120, 40));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Ebrima", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 153));
        jLabel12.setText("Coloca un espacio entre caracteres");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 190, 40));

        txtSin.setColumns(20);
        txtSin.setRows(5);
        jScrollPane1.setViewportView(txtSin);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, 230, 70));

        txtLex.setColumns(20);
        txtLex.setRows(5);
        jScrollPane2.setViewportView(txtLex);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 230, 70));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 530, 420));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Ebrima", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Programa 12");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 180, 60));

        jLCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_Multiply_32px.png"))); // NOI18N
        jLCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLCerrarMouseClicked(evt);
            }
        });
        jPanel2.add(jLCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jLMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_Expand_Arrow_32px.png"))); // NOI18N
        jLMinimizar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLMinimizarMouseClicked(evt);
            }
        });
        jPanel2.add(jLMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 90));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCadenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCadenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCadenaActionPerformed

    private void jLCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLCerrarMouseClicked
        //Evento del icono cerrar
        this.dispose();
    }//GEN-LAST:event_jLCerrarMouseClicked

    private void jLMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLMinimizarMouseClicked
        // Evento del icono minimizar

        this.setState(PortadaPrueba.ICONIFIED );
    }//GEN-LAST:event_jLMinimizarMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Evento para limpriar la caja de texto
        txtCadena.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Evento para evaliar la cadena
        
        btnBuscar.requestFocus();
        cadena = "";

        cadena = txtCadena.getText();
        error = false;
        errorLexico = false;
        banderaPar = false;
        numeroPar = 0;

        if (cadena.isEmpty() || cadena.equals("Ingresa la cadena a buscar...")) {
            JOptionPane.showMessageDialog(null, "Ingresa una cadena.");
        } else {

            try {
                analisisLexico();
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            analisisSintactico();

         
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    public Token getToken() {
        tokens = null;
        if (contadorToken < tokensLista.size()) {
            tokens = tokensLista.get(contadorToken++);
        }
        return tokens;
    }
    
    private void analisisLexico() throws FileNotFoundException, IOException {
        tokensLista = new LinkedList<>();
        this.txtLex.selectAll();
        this.txtLex.replaceSelection("");
        
        File fuente = new File("Fuente.txt");
        PrintWriter writer;
        
        try {        
            writer = new PrintWriter(fuente);
            writer.print(txtCadena.getText());
            writer.close();
        } catch(FileNotFoundException ex) {
            ex.printStackTrace();
        }
        
        Reader reader = new BufferedReader(new FileReader("Fuente.txt"));
        Lexico lexico = new Lexico(reader);
        String resultado = "";
        
        while(true){
        
            Tokens token = lexico.yylex();
            
            if(token == null) {
                txtLex.append(resultado);
                return;
            }
            
            switch(token){
            
                case SUM:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<+>";
                    break;
                    
                case MULT:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<*>";
                    break;
                    
                case PARI:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<(>";
                    break;
                    
                case PARD:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<)>";
                    break;
                    
                case NUM:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<num>";
                    break;
                    
                case ERROR:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "Error, simbolo " + lexico.yytext() + " no reconocido ";
                    errorLexico = true;
                    break;
                    
                case PYC:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<;>";
                    break;
                    
                default:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<" + lexico.yytext() + ">";
            }
        }
    }
    
    private void analisisSintactico() {
        if (tokensLista != null) {
            txtSin.setText("");

            contadorToken = 0;
            error = false;
            resultadoSintactico = "";

            tokens = null;
            tokens = getToken();
            
            metodo_S();
            
            if (!error && !errorLexico && numeroPar <= 0) {
                resultadoSintactico = "Correcto.";
            }
            
            txtSin.append(resultadoSintactico);
        }
    }
    
    private void metodo_S() {
        metodo_E();
        
        if (tokens != null && tokens.getNombre().equals(";") && !error && !banderaPar && numeroPar <= 0) {
            tokens = getToken();
            if (tokens == null) {
                return;
            } else {
                error = true;
                error(false);
            }
        } else if (tokens == null || !tokens.getNombre().equals(";")){
            error = true;
            error(true);
        }
    }
    
    private void metodo_E() {
        if (tokens != null && tokens.getNombre().equals("("))  {
            banderaPar = true;
            numeroPar++;
            tokens = getToken();
            metodo_E();
            
            if ((tokens != null && !tokens.getNombre().equals(";"))) {
                tokens = getToken();
                
                if (tokens != null && !tokens.getNombre().equals(";") && !tokens.getNombre().equals(")")) {
                    metodo_X();
                    
                } else if (tokens == null || tokens.getNombre().equals(";")) {
                    return;
                } else if (tokens.getNombre().equals(")")) {
                    numeroPar--;
                    banderaPar = false;
                }
            } else if (tokens == null || tokens.getNombre().equals(";")) {
                return;
            }
       } else if (tokens != null && tokens.getNombre().equals("num")) {
            tokens = getToken();
                
            if (tokens != null && !tokens.getNombre().equals(";") && !tokens.getNombre().equals(")")) {
                metodo_X();
                
            } else if (tokens != null && tokens.getNombre().equals(")")) {
                numeroPar--;
                banderaPar = false;
            } else if (tokens == null || tokens.getNombre().equals(";") && !banderaPar && numeroPar <= 0){
                return;
            } else {
                error = true;
                error(false);
            }
        } else {
            error = true;
            error(false);
            tokens = getToken();
        }
    }
    
    private void metodo_X() {
        if (tokens != null && tokens.getNombre().equals("*")) {
            tokens = getToken();
            
            metodo_E();
            
            if (tokens != null && !tokens.getNombre().equals(";") && !tokens.getNombre().equals(")")) {
                tokens = getToken();
                metodo_X();
                
            } else if (tokens == null || tokens.getNombre().equals(";")) {
                return;
            } else if (tokens.getNombre().equals(")")) {
                numeroPar--;
                banderaPar = false;
            }
        } else if (tokens != null && tokens.getNombre().equals("+")) {
             tokens = getToken();
             
             metodo_E();
             
             if (tokens != null && !tokens.getNombre().equals(";") && !tokens.getNombre().equals(")")) {
                tokens = getToken();
                 
                metodo_X();
                
             } else if (tokens == null || tokens.getNombre().equals(";")) {
                return;
             } else if (tokens.getNombre().equals(")")) {
                numeroPar--;
                banderaPar = false;
            }
        } else {
            error = true;
            error(false);
        }
    }
    
    private void error(boolean esPyc) {
        if (tokens != null && !esPyc) {
            resultadoSintactico += "Error de sintaxis en " + tokens.getNombre() + "\n";
        } else if (esPyc && !cadena.contains(";")) {
            resultadoSintactico += "Error de sintaxis, falta ';'\n";
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalizdorSintactco3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalizdorSintactco3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalizdorSintactco3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalizdorSintactco3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalizdorSintactco3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLCerrar;
    private javax.swing.JLabel jLMinimizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtCadena;
    private javax.swing.JTextArea txtLex;
    private javax.swing.JTextArea txtSin;
    // End of variables declaration//GEN-END:variables
}
