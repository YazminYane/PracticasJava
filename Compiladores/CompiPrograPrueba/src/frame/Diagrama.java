/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import AppPackage.AnimationClass;
import Diagrama_P13.Lexico;
import Diagrama_P13.Token;
import Diagrama_P13.Tokens;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Yazmin Yane
 */
public class Diagrama extends javax.swing.JFrame {

    private File archivo;
    private List<Token> tokensLista;
    private int contadorToken = 0;
    private Token tokens;
    private String resultadoSintactico = "";
    private boolean error = false;
    private boolean errorLexico = false;
    
    public Diagrama() {
        initComponents();
        this.setLocationRelativeTo( null );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        btnSeleccionar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taSintactico = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taSalida = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLCerrar = new javax.swing.JLabel();
        jLMinimizar = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 153));
        jLabel4.setText("Inserte cadena a evaluar :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 210, 40));

        txtRuta.setText("jTextField1");
        jPanel1.add(txtRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 470, 30));

        btnSeleccionar.setText("Cargar Archivo ");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });
        jPanel1.add(btnSeleccionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 120, 30));

        btnBuscar.setText("Analizar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 120, 30));

        taSintactico.setColumns(20);
        taSintactico.setRows(5);
        jScrollPane1.setViewportView(taSintactico);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 270, 240, 70));

        taSalida.setColumns(20);
        taSalida.setRows(5);
        jScrollPane2.setViewportView(taSalida);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 240, 70));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 510, 370));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_Multiply_32px.png"))); // NOI18N
        jLCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLCerrarMouseClicked(evt);
            }
        });
        jPanel2.add(jLCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, -1, -1));

        jLMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_Expand_Arrow_32px.png"))); // NOI18N
        jLMinimizar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLMinimizarMouseClicked(evt);
            }
        });
        jPanel2.add(jLMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("Ebrima", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Programa 13");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 180, 60));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 90));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLCerrarMouseClicked
        //Evento del icono cerrar
        this.dispose();
    }//GEN-LAST:event_jLCerrarMouseClicked

    private void jLMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLMinimizarMouseClicked
        // Evento del icono minimizar

        this.setState(PortadaPrueba.ICONIFIED );
    }//GEN-LAST:event_jLMinimizarMouseClicked

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de texto", "txt");
        fc.setFileFilter(filtro);

        int seleccion = fc.showOpenDialog(this.getContentPane());

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            archivo = fc.getSelectedFile();
            txtRuta.setText(archivo.getAbsolutePath());
        } else if (seleccion == JFileChooser.ERROR_OPTION) {
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo. Int√©ntalo de nuevo.");
        }
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        

        error = false;
        errorLexico = false;
        tokens = null;
        taSalida.setText("");
        taSintactico.setText("");
        tokensLista = new LinkedList<Token>();
        resultadoSintactico = "";
        contadorToken = 0;
        
        try {
            analizar();
            
            if (!error && !errorLexico) {
                AnimationClass anim = new AnimationClass();
                
            } else {
                AnimationClass anim = new AnimationClass();
                            }
        } catch(Exception e ){
            JOptionPane.showMessageDialog(null, "Error al analizar el archivo. Asegurate que sea un archivo fuente.");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void analizar() {
        try {
            analisisLexico();
            secuencia();
            
            taSintactico.append(resultadoSintactico);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    public void analisisLexico() throws FileNotFoundException, IOException {

        tokensLista = new LinkedList<>();
        this.taSintactico.selectAll();
        this.taSintactico.replaceSelection("");
        int contadorID = 0;
        
        Reader reader = new BufferedReader(new FileReader(archivo));
        Lexico lexico = new Lexico(reader);
        String resultado = "";

        while (true) {
            Tokens token = lexico.yylex();
            
            if (token == null) {
                taSalida.append(resultado);
                return;
            }

            switch (token) {

                case MAS:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(10);
                    tokensLista.add(tokens);
                    resultado = resultado + "<+>";
                    break;
                    
                case MENOS:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(11);
                    tokensLista.add(tokens);
                    resultado = resultado + "<->";
                    break;
                    
                case IGUAL:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(4);
                    tokensLista.add(tokens);
                    resultado = resultado + "<=>";
                    break;
                    
                case ERROR:
                    tokens.setNombre(lexico.yytext());
                    tokens.setId(contadorID);
                    tokensLista.add(tokens);
                    resultado = resultado + "Error, simbolo " + lexico.yytext() + " no reconocido";
                    errorLexico = true;
                    break;
                    
                case ID:
                    contadorID++;
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setId(contadorID);
                    tokens.setTipo(1);
                    tokensLista.add(tokens);
                    resultado = resultado + "<ID" + contadorID + ">";
                    break;
                    
                case NUM:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(2);
                    tokensLista.add(tokens);
                    resultado = resultado + "<" + lexico.lexema + ">";
                    break;
                    
                case PUNTOYCOMA:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(3);
                    tokensLista.add(tokens);
                    resultado = resultado + "<;>";
                    break;
                    
                case ME:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(5);
                    tokensLista.add(tokens);
                    resultado = resultado + "<-<->";
                    break;
                    
                case MEI:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(6);
                    tokensLista.add(tokens);
                    resultado = resultado + "<-<=->";
                    break;
                    
                case DIST:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(7);
                    tokensLista.add(tokens);
                    resultado = resultado + "<!=>";
                    break;
                    
                case MAI:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(8);
                    tokensLista.add(tokens);
                    resultado = resultado + "<->=->";
                    break;
                    
                case MA:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(9);
                    tokensLista.add(tokens);
                    resultado = resultado + "<->->";
                    break;
                    
                case OR:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(12);
                    tokensLista.add(tokens);
                    resultado = resultado + "<or>";
                    break;
                    
                case POR:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(13);
                    tokensLista.add(tokens);
                    resultado = resultado + "<*>";
                    break;
                    
                case DIV:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(14);
                    tokensLista.add(tokens);
                    resultado = resultado + "</>";
                    break;
                    
                case DIV_ENT:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(15);
                    tokensLista.add(tokens);
                    resultado = resultado + "<div>";
                    break;
                    
                case MOD:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(16);
                    tokensLista.add(tokens);
                    resultado = resultado + "<mod>";
                    break;
                    
                case AND:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(17);
                    tokensLista.add(tokens);
                    resultado = resultado + "<and>";
                    break;
                    
                case NOT:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(18);
                    tokensLista.add(tokens);
                    resultado = resultado + "<not>";
                    break;
                    
                case AB_PARID:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(19);
                    tokensLista.add(tokens);
                    resultado = resultado + "<(>";
                    break;
                    
                case CE_PAR:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokens.setTipo(20);
                    tokensLista.add(tokens);
                    resultado = resultado + "<)>";
                    break;
                    
                default:
                    tokens = new Token();
                    tokens.setNombre(lexico.yytext());
                    tokensLista.add(tokens);
                    resultado = resultado + "<" + lexico.lexema + ">";
            }
        }
    }
    
    public Token getToken() {
        tokens = null;
        if (contadorToken < tokensLista.size()) {
            tokens = tokensLista.get(contadorToken++);
        }
        return tokens;
    }
    
    private void secuencia() {
        tokens = getToken();
        do {
            expresion();
            if(tokens != null ){
                while(tokens != null && tokens.getTipo() != 3) {
                    error = true;
                    tokens = getToken();
                }
            } else {
                error = true;
            }
            tokens = getToken();
        } while(tokens != null);
        
        if(!error) {
            taSintactico.append("Correcto");
        } else {
            taSintactico.append("Error de sintaxis");
        }
    }

    private void expresion() {
        if (tokens != null) {
            exprSimple();
            if (tokens != null && (tokens.getTipo() == 4 || tokens.getTipo() == 5 || 
                    tokens.getTipo() == 6 || tokens.getTipo() == 7 || 
                    tokens.getTipo() == 8 || tokens.getTipo() == 9)) {
                
                tokens = getToken();
                exprSimple();
            }
        } 
    }

    private void exprSimple() {
        if (tokens != null) {
            if (tokens.getTipo() == 10 || tokens.getTipo() == 11) {
                tokens = getToken();
              
            } else {
                termino();
            }
            while(tokens != null && (tokens.getTipo() == 10 || tokens.getTipo() == 11 || 
                    tokens.getTipo() == 12)) {
                
                tokens = getToken();
                termino();
            }
        }
    }

    private void termino() {
        if (tokens != null) {
            factor();
            if (tokens != null) {
                while(tokens.getTipo() == 13 || tokens.getTipo() == 14 || tokens.getTipo() == 15
                        || tokens.getTipo() == 16 || tokens.getTipo() == 17) {
                    
                    tokens = getToken();
                    factor();
                }
            }
        }
    }

    private void factor() {
        if (tokens != null) {
            switch (tokens.getTipo()) {
                
                case 1:
                    tokens = getToken();
                    break;
                    
                case 2:
                    tokens = getToken();
                    break;
                    
                case 18:
                    tokens = getToken();
                    if (tokens != null) {
                        factor();
                    }
                    break;
                    
                case 19:
                    tokens = getToken();
                    if (tokens != null) {
                        expresion();
                        if (tokens == null || tokens.getTipo() != 20 ) {
                            error = true;
                        } else {
                            tokens = getToken();
                        }
                    } else {
                        error = true;
                    }
                    break;
                    
                default:
                    error = true;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diagrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diagrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diagrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diagrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diagrama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JLabel jLCerrar;
    private javax.swing.JLabel jLMinimizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taSalida;
    private javax.swing.JTextArea taSintactico;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables
}
