/* Analizador Sintáctico para Karen*/
package fes.aragon.archivos;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.PrintWriter;
import java.io.FileNotFoundException;

/*Código de Usuario*/
parser code
{:
    
    /*Error sintáctico.*/
    public void syntax_error(Symbol s){
        if(s.left >= 0){
            System.out.println("Error en la línea: " +(s.left+1) + " Columna: " + s.right + 
                                " Identificador: " + s.value + " no reconocido.");
        }else{
            System.out.println("Archivo incompleto.");
        }
    }

    /*Error sin recuperación.*/
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error irrecuperable.   :'C");
    }

    /*Método Main*/
    public static void main(String[] args){
        try {
            SintacticoKarel asin = new SintacticoKarel(
                    new LexicoKarel( new FileReader(args[0])));
            System.out.println("Análisis Léxico. \nAnálisis Sintáctico.");
            
            /*Para empezar a evaluar*/
            asin.parse();
            System.out.println("\n*** Análisis Finalizado. ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:}

action code
{:
    private boolean bandera = false;
    
    private File archivo = new File("Fuente.txt");
    private PrintWriter writer;

    private void escribir(String cadena){
            writer.println(cadena);
    }

    private void cerrarArchivo(){
        writer.close();
    }
    
    private void abrirArchivo(){
        try{
            writer = new PrintWriter(archivo);
        } catch(FileNotFoundException e){
            System.out.println("Archivo no encontrado");
        }

    }
:}

/* Terminales (Tokens devueltos por el Analizador Léxico) */
terminal movIzq, movDer, movArr, movAb, comer, si, rep, mient, parIzq, parDer, parArr, parAb, NoParIzq, NoParDer, NoParArr, NoParAb, inicio, fin, pyc, llaveIzq, llaveDer, pareIzq, pareDer;
terminal String num;

/*No terminales*/
non terminal INICIA, S, IF, REP, MIENT, COND;

/* Precedencia */

/* Reglas de Producción */
start with INICIA;
INICIA ::= {:abrirArchivo();:} inicio S fin {:cerrarArchivo();:} | error {:System.out.println("Error.");  bandera = false;:};
S ::= 
    movIzq {:escribir("mI");:} pyc S | 
    movDer {:escribir("mD");:} pyc S | 
    movArr {:escribir("mA");:} pyc S | 
    movAb {:escribir("mIa");:} pyc S | 
    comer {:escribir("c");:} pyc S | 
    IF S | REP S | MIENT S | ;
IF ::= si {:escribir("?");:} pareIzq COND pareDer llaveIzq S llaveDer {:escribir("#");:};
REP ::= rep {:escribir("*");:} pareIzq num:n {:escribir(n); :} pareDer llaveIzq S llaveDer {:escribir("#");:};
MIENT ::= mient {:escribir("$");:} pareIzq COND pareDer llaveIzq S llaveDer {:escribir("#");:};
COND ::= parIzq {:escribir("pI");:} | parDer {:escribir("pD");:} | parArr {:escribir("pA");:} | parAb {:escribir("pa");:} | NoParIzq {:escribir("NPI");:} | NoParDer {:escribir("NPD");:} | NoParArr {:escribir("NPA");:} | NoParAb {:escribir("NPa");:} | error {:System.out.println("Error.");  bandera = false;:};

