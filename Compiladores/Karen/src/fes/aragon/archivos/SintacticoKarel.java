
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 23 05:36:29 CDT 2018
//----------------------------------------------------

package fes.aragon.archivos;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.PrintWriter;
import java.io.FileNotFoundException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 23 05:36:29 CDT 2018
  */
public class SintacticoKarel extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoKarel() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoKarel(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoKarel(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\010\002\000\002\002" +
    "\006\000\002\002\003\000\002\011\002\000\002\003\006" +
    "\000\002\012\002\000\002\003\006\000\002\013\002\000" +
    "\002\003\006\000\002\014\002\000\002\003\006\000\002" +
    "\015\002\000\002\003\006\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\016\002" +
    "\000\002\004\012\000\002\017\002\000\002\020\002\000" +
    "\002\005\013\000\002\021\002\000\002\006\012\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\006\003\005\024\000\001\002\000\004\002" +
    "\106\001\002\000\004\002\ufffe\001\002\000\004\024\007" +
    "\001\002\000\024\004\017\005\021\006\016\007\012\010" +
    "\010\011\014\012\023\013\022\025\ufff0\001\002\000\004" +
    "\026\ufff5\001\002\000\026\004\017\005\021\006\016\007" +
    "\012\010\010\011\014\012\023\013\022\025\ufff0\030\ufff0" +
    "\001\002\000\004\026\ufff7\001\002\000\004\025\076\001" +
    "\002\000\004\031\uffef\001\002\000\026\004\017\005\021" +
    "\006\016\007\012\010\010\011\014\012\023\013\022\025" +
    "\ufff0\030\ufff0\001\002\000\004\026\ufff9\001\002\000\004" +
    "\026\ufffd\001\002\000\026\004\017\005\021\006\016\007" +
    "\012\010\010\011\014\012\023\013\022\025\ufff0\030\ufff0" +
    "\001\002\000\004\026\ufffb\001\002\000\004\031\uffea\001" +
    "\002\000\004\031\uffed\001\002\000\004\031\025\001\002" +
    "\000\004\033\026\001\002\000\004\032\uffec\001\002\000" +
    "\004\032\030\001\002\000\004\027\031\001\002\000\024" +
    "\004\017\005\021\006\016\007\012\010\010\011\014\012" +
    "\023\013\022\030\ufff0\001\002\000\004\030\033\001\002" +
    "\000\026\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\025\uffeb\030\uffeb\001\002\000\004" +
    "\031\035\001\002\000\024\003\043\014\044\015\045\016" +
    "\042\017\046\020\036\021\040\022\037\023\047\001\002" +
    "\000\004\032\uffe4\001\002\000\004\032\uffe2\001\002\000" +
    "\004\032\uffe3\001\002\000\004\032\050\001\002\000\004" +
    "\032\uffe6\001\002\000\004\032\uffe0\001\002\000\004\032" +
    "\uffe8\001\002\000\004\032\uffe7\001\002\000\004\032\uffe5" +
    "\001\002\000\004\032\uffe1\001\002\000\004\027\051\001" +
    "\002\000\024\004\017\005\021\006\016\007\012\010\010" +
    "\011\014\012\023\013\022\030\ufff0\001\002\000\004\030" +
    "\053\001\002\000\026\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\025\uffe9\030\uffe9\001" +
    "\002\000\004\026\055\001\002\000\026\004\017\005\021" +
    "\006\016\007\012\010\010\011\014\012\023\013\022\025" +
    "\ufff0\030\ufff0\001\002\000\006\025\ufffa\030\ufffa\001\002" +
    "\000\006\025\ufff3\030\ufff3\001\002\000\004\026\061\001" +
    "\002\000\026\004\017\005\021\006\016\007\012\010\010" +
    "\011\014\012\023\013\022\025\ufff0\030\ufff0\001\002\000" +
    "\006\025\ufffc\030\ufffc\001\002\000\004\026\064\001\002" +
    "\000\026\004\017\005\021\006\016\007\012\010\010\011" +
    "\014\012\023\013\022\025\ufff0\030\ufff0\001\002\000\006" +
    "\025\ufff8\030\ufff8\001\002\000\006\025\ufff1\030\ufff1\001" +
    "\002\000\004\031\070\001\002\000\024\003\043\014\044" +
    "\015\045\016\042\017\046\020\036\021\040\022\037\023" +
    "\047\001\002\000\004\032\072\001\002\000\004\027\073" +
    "\001\002\000\024\004\017\005\021\006\016\007\012\010" +
    "\010\011\014\012\023\013\022\030\ufff0\001\002\000\004" +
    "\030\075\001\002\000\026\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\025\uffee\030\uffee" +
    "\001\002\000\004\002\uffff\001\002\000\004\026\100\001" +
    "\002\000\026\004\017\005\021\006\016\007\012\010\010" +
    "\011\014\012\023\013\022\025\ufff0\030\ufff0\001\002\000" +
    "\006\025\ufff6\030\ufff6\001\002\000\006\025\ufff2\030\ufff2" +
    "\001\002\000\004\026\104\001\002\000\026\004\017\005" +
    "\021\006\016\007\012\010\010\011\014\012\023\013\022" +
    "\025\ufff0\030\ufff0\001\002\000\006\025\ufff4\030\ufff4\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\006\002\003\010\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\012" +
    "\004\017\005\010\006\014\001\001\000\004\015\102\001" +
    "\001\000\012\003\101\004\017\005\010\006\014\001\001" +
    "\000\004\014\076\001\001\000\002\001\001\000\004\016" +
    "\066\001\001\000\012\003\065\004\017\005\010\006\014" +
    "\001\001\000\004\013\062\001\001\000\004\011\057\001" +
    "\001\000\012\003\056\004\017\005\010\006\014\001\001" +
    "\000\004\012\053\001\001\000\004\021\033\001\001\000" +
    "\004\017\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\031\004\017\005\010\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\051\004\017\005\010\006\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\055\004" +
    "\017\005\010\006\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\061\004\017\005" +
    "\010\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\064\004\017\005\010\006\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\073\004\017\005\010\006\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\100\004\017\005\010\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\104\004\017\005\010\006\014\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoKarel$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoKarel$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoKarel$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /*Error sintáctico.*/
    public void syntax_error(Symbol s){
        if(s.left >= 0){
            System.out.println("Error en la línea: " +(s.left+1) + " Columna: " + s.right + 
                                " Identificador: " + s.value + " no reconocido.");
        }else{
            System.out.println("Archivo incompleto.");
        }
    }

    /*Error sin recuperación.*/
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error irrecuperable.   :'C");
    }

    /*Método Main*/
    public static void main(String[] args){
        try {
            SintacticoKarel asin = new SintacticoKarel(
                    new LexicoKarel( new FileReader(args[0])));
            System.out.println("Análisis Léxico. \nAnálisis Sintáctico.");
            
            /*Para empezar a evaluar*/
            asin.parse();
            System.out.println("\n*** Análisis Finalizado. ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoKarel$actions {


    private boolean bandera = false;
    
    private File archivo = new File("Fuente.txt");
    private PrintWriter writer;

    private void escribir(String cadena){
            writer.println(cadena);
    }

    private void cerrarArchivo(){
        writer.close();
    }
    
    private void abrirArchivo(){
        try{
            writer = new PrintWriter(archivo);
        } catch(FileNotFoundException e){
            System.out.println("Archivo no encontrado");
        }

    }

  private final SintacticoKarel parser;

  /** Constructor */
  CUP$SintacticoKarel$actions(SintacticoKarel parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoKarel$do_action(
    int                        CUP$SintacticoKarel$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoKarel$parser,
    java.util.Stack            CUP$SintacticoKarel$stack,
    int                        CUP$SintacticoKarel$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoKarel$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoKarel$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COND ::= error 
            {
              Object RESULT =null;
		System.out.println("Error.");  bandera = false;
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COND ::= NoParAb 
            {
              Object RESULT =null;
		escribir("NPa");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COND ::= NoParArr 
            {
              Object RESULT =null;
		escribir("NPA");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COND ::= NoParDer 
            {
              Object RESULT =null;
		escribir("NPD");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COND ::= NoParIzq 
            {
              Object RESULT =null;
		escribir("NPI");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COND ::= parAb 
            {
              Object RESULT =null;
		escribir("pa");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COND ::= parArr 
            {
              Object RESULT =null;
		escribir("pA");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COND ::= parDer 
            {
              Object RESULT =null;
		escribir("pD");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COND ::= parIzq 
            {
              Object RESULT =null;
		escribir("pI");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("COND",5, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MIENT ::= mient NT$9 pareIzq COND pareDer llaveIzq S llaveDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-6)).value;
		escribir("#");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("MIENT",4, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
escribir("$");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$9",15, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REP ::= rep NT$7 pareIzq num NT$8 pareDer llaveIzq S llaveDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-5)).value;
		escribir("#");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("REP",3, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.peek()).value;
escribir(n); 
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$8",14, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =null;
escribir("*");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$7",13, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= si NT$6 pareIzq COND pareDer llaveIzq S llaveDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-6)).value;
		escribir("#");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              Object RESULT =null;
escribir("?");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$6",12, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= 
            {
              Object RESULT =null;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= MIENT S 
            {
              Object RESULT =null;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= REP S 
            {
              Object RESULT =null;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= IF S 
            {
              Object RESULT =null;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= comer NT$5 pyc S 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-2)).value;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
escribir("c");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$5",11, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= movAb NT$4 pyc S 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-2)).value;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
escribir("mIa");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$4",10, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= movArr NT$3 pyc S 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-2)).value;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
escribir("mA");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$3",9, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= movDer NT$2 pyc S 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-2)).value;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
escribir("mD");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$2",8, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= movIzq NT$1 pyc S 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-2)).value;

              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
escribir("mI");
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIA ::= error 
            {
              Object RESULT =null;
		System.out.println("Error.");  bandera = false;
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIA ::= NT$0 inicio S fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)).value;
		cerrarArchivo();
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
abrirArchivo();
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          return CUP$SintacticoKarel$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoKarel$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.elementAt(CUP$SintacticoKarel$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoKarel$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoKarel$parser.done_parsing();
          return CUP$SintacticoKarel$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

